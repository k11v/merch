services:
  server:
    build: .
    entrypoint: ["server"]
    env_file:
      - example.env
    environment:
      - APP_POSTGRES_URL=postgres://postgres:postgres@postgres:5432/postgres
      - APP_HOST=0.0.0.0
      - APP_PORT=8080
      - APP_JWT_VERIFICATION_KEY_FILE=/user/jwt-data/public.pem
      - APP_JWT_SIGNATURE_KEY_FILE=/user/jwt-data/private.pem
    ports:
      - "8080:8080"
    volumes:
      - jwt-data:/user/jwt-data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8080/api/health"]
      interval: 3s
      timeout: 30s
      retries: 10
    depends_on:
      setup:
        condition: service_completed_successfully
  setup:
    build: .
    entrypoint: ["setup"]
    command: ["-app"]
    env_file:
      - example.env
    environment:
      - APP_POSTGRES_URL=postgres://postgres:postgres@postgres:5432/postgres
      - APP_JWT_VERIFICATION_KEY_FILE=/user/jwt-data/public.pem
      - APP_JWT_SIGNATURE_KEY_FILE=/user/jwt-data/private.pem
    volumes:
      - jwt-data:/user/jwt-data
    depends_on:
      postgres:
        condition: service_healthy
  postgres:
    image: postgres:13
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 3s
      timeout: 30s
      retries: 10
volumes:
  jwt-data:
  postgres-data:
